MATCH (a:Person)-[:ACTED_IN]-(m:Movie)-[:DIRECTED]-(d:Person), (m:Movie)-[:HAS_GENRE]-(g:Genre)
WHERE d.name='Quentin Tarantino' AND g.name = 'Comedy'
RETURN DISTINCT a.name, m.title

MATCH (m:Movie)-[:PRODUCED]-(c:Company)
WHERE c.name='VÃ­a Digital'
RETURN DISTINCT m.title

MATCH (a:Person)-[:NOMINATED]-(aw:Award), (a:Person)-[:ACTED_IN]-(m:Movie)
RETURN DISTINCT a.name, aw.year, aw.award_company, aw.award_type, m.title


MATCH
	(a:Person)-[:ACTED_IN]-(m:Movie)-[:DIRECTED]-(d:Person),
	(m:Movie)-[:HAS_GENRE]-(g:Genre),
	(a:Person)-[:NOMINATED]-(aw:Award)
WHERE d.name='Quentin Tarantino' AND g.name = 'Action'
RETURN DISTINCT a.name, m.title, aw.award_company, aw.award_type

MATCH
	(a:Person)-[:ACTED_IN]-(m:Movie)-[:DIRECTED]-(d:Person),
	(m:Movie)-[:HAS_GENRE]-(g:Genre),
	(a:Person)-[:NOMINATED]-(aw:Award)
WHERE  d.name='Roman Polanski'AND g.name = 'Drama'
RETURN DISTINCT d.name, a.name, m.title, aw.award_company, aw.award_type, aw.year, g.name


MATCH
	(a:Person)-[:ACTED_IN]-(m:Movie)-[:DIRECTED]-(d:Person),
	(m:Movie)-[:HAS_GENRE]-(g:Genre),
	(m:Movie)-[:HAS_TOPIC]-(t:Topic),
	(a:Person)-[:NOMINATED]-(aw:Award)
WHERE  d.name='Roman Polanski'AND g.name = 'Drama' AND any(x IN t.topics WHERE x IN ['spacecraft'])
RETURN DISTINCT t.topics, d.name, a.name, m.title, aw.award_company, aw.award_type, aw.year, g.name


# Reorganize topics into keywords. Reaches outside of the slices the topics were made
MATCH (t:Topic)<-[]-(m:Movie) UNWIND(t.topics) as keyword
MERGE (k:Keyword {keyword: keyword})
MERGE (k)<-[:HAS_KEYWORD]-(m)

# Most number of keywords used by movies
MATCH (m:Movie)-[:HAS_TOPIC]-(t:Topic) 
UNWIND t.topics as t_topics
RETURN DISTINCT t_topics, COUNT(m) as amt_movies
ORDER BY amt_movies DESC

OR (With merge)

# Most number of keywords used by movies
MATCH (m:Movie)-[:HAS_KEYWORD]-(k:Keyword) 
RETURN k, COUNT(m) as amt_movies
ORDER BY amt_movies DESC


# keywords that were most nominated for awards
MATCH (m:Movie)-[:HAS_TOPIC]-(t:Topic),
      (m:Movie)-[:NOMINATED]-(a:Award)
UNWIND t.topics as t_topics
RETURN DISTINCT t_topics, COUNT(m) as amt_movies
ORDER BY amt_movies DESC

OR (With merge)

MATCH (m:Movie)-[:HAS_KEYWORD]-(k:Keyword),
      (m:Movie)-[:NOMINATED]-(a:Award)
RETURN k, COUNT(m) as amt_movies
ORDER BY amt_movies DESC

# Determine frequency of keywords and records in relating to movies that win awards
MATCH (k:Keyword)--(m:Movie)-[:WON]-(a:Award) return k.keyword, COUNT(*) as won ORDER BY won DESC

OR 

MATCH (k:Topic)--(m:Movie)-[:WON]-(a:Award) return k.topics, COUNT(*) as won ORDER BY won DESC

# Find top keywords in relation to the genre and the company
MATCH (k:Keyword)--(m:Movie)--(a:Genre {name: "Romance"}) with a.name AS genre, k.keyword AS word, COUNT(*) as present
RETURN word
ORDER BY present DESC LIMIT 10

MATCH (k:Keyword)--(m:Movie)--(a:Genre {name: "Comedy"}) with a.name AS genre, k.keyword AS word, COUNT(*) as present
RETURN word
ORDER BY present DESC LIMIT 10

MATCH (k:Keyword)--(m:Movie)--(a:Company {name: "Warner Bros."}) with a.name AS genre, k.keyword AS word, COUNT(*) as present
RETURN word
ORDER BY present DESC LIMIT 10

MATCH (k:Keyword)--(m:Movie)--(a:Company {name: "Paramount Pictures"}) with a.name AS genre, k.keyword AS word, COUNT(*) as present
RETURN word
ORDER BY present DESC LIMIT 10


# Find the most mutally networked actors that have not worked together in the given movies
MATCH (a:Person)-[:ACTED_IN]->(m:Movie)--(b:Person)--(n:Movie)<-[:ACTED_IN]-(c:Person)
WHERE a.name < c.name
WITH a, c, COUNT(*) AS network
WHERE NOT (a)--(:Movie)--(c)
RETURN a.name, c.name, network ORDER BY network DESC LIMIT 10

# Actors that have won awards in the same topic, but not previously worked together
MATCH (a:Person)-[:ACTED_IN]->(m:Movie)--(b:Person)--(n:Movie)<-[:ACTED_IN]-(c:Person),
(a)-[:WON]->(w1:Award),
(c)-[:WON]->(w2:Award)
WHERE a.name < c.name AND w1.award_type = w2.award_type
AND NOT (a)--(:Movie)--(c)
RETURN DISTINCT a.name, c.name, w1.award_type